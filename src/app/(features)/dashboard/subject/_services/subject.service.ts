'use client';

import api from "@/lib/server/interceptor/axios";

/**
 * ğŸ“Œ Interface pour une matiÃ¨re (version complÃ¨te)
 */
export interface Subject {
  id: number;
  name: string;
  code: string;
  description?: string;
  credits: number;
  coefficient: number;
  type: string;        // ex: "cours", "tp", "projet", "stage", "examen"
  formation_id: number;
  semester: number;    // ex: 1, 2, 3, 4, 5, 6
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

/**
 * ğŸ“Œ Interface pour la crÃ©ation/modification d'une matiÃ¨re
 */
export interface SubjectFormData {
  name: string;
  code: string;
  description?: string;
  credits: number;
  coefficient: number;
  type: string;
  formation_id: number;
  semester: number;
  is_active: boolean;
}

/**
 * ğŸ“Œ Interface de pagination gÃ©nÃ©rique
 */
export interface PaginatedResponse<T> {
  current_page: number;
  data: T[];
  total: number;
  per_page: number;
  last_page: number;
}

/**
 * ğŸ“Œ RÃ©cupÃ©ration des matiÃ¨res avec pagination et recherche
 */
export async function getSubjects(page: number = 1, search?: string) {
  try {
    const res = await api.get<PaginatedResponse<Subject>>("/admin/subjects", {
      params: { page, search }
    });
    return res.data;
  } catch (err: any) {
    console.error("Erreur API getSubjects:", {
      message: err.message,
      status: err.response?.status,
      statusText: err.response?.statusText,
      data: err.response?.data,
      url: err.config?.url,
      method: err.config?.method
    });
    
    const errorMessage = err.response?.data?.message || 
                        (err.response?.status === 401 ? "AccÃ¨s non autorisÃ©. Veuillez vous reconnecter." :
                         err.response?.status === 403 ? "AccÃ¨s interdit." :
                         err.response?.status === 404 ? "Endpoint non trouvÃ©." :
                         err.response?.status >= 500 ? "Erreur serveur. RÃ©essayez plus tard." :
                         err.code === 'ECONNREFUSED' ? "Serveur indisponible. VÃ©rifiez que le backend est dÃ©marrÃ©." :
                         err.code === 'ENOTFOUND' ? "Impossible de contacter le serveur." :
                         "Erreur lors du chargement des matiÃ¨res");
    
    throw new Error(errorMessage);
  }
}

/**
 * ğŸ“Œ RÃ©cupÃ©ration d'une matiÃ¨re spÃ©cifique
 */
export async function getSubject(id: number): Promise<Subject> {
  try {
    // Validation de l'ID
    if (isNaN(id) || id <= 0) {
      throw new Error("ID de matiÃ¨re invalide");
    }
    
    const res = await api.get<Subject>(`/admin/subjects/${id}`);
    return res.data;
  } catch (err: any) {
    throw new Error(err.response?.data?.message || "Erreur lors du chargement de la matiÃ¨re");
  }
}

/**
 * ğŸ“Œ CrÃ©ation d'une nouvelle matiÃ¨re
 */
export async function createSubject(data: SubjectFormData): Promise<Subject> {
  try {
    const res = await api.post<Subject>("/admin/subjects", data);
    return res.data;
  } catch (err: any) {
    throw new Error(err.response?.data?.message || "Erreur lors de la crÃ©ation de la matiÃ¨re");
  }
}

/**
 * ğŸ“Œ Mise Ã  jour d'une matiÃ¨re
 */
export async function updateSubject(id: number, data: Partial<SubjectFormData>): Promise<Subject> {
  try {
    // Validation de l'ID
    if (isNaN(id) || id <= 0) {
      throw new Error("ID de matiÃ¨re invalide");
    }
    
    const res = await api.put<Subject>(`/admin/subjects/${id}`, data);
    return res.data;
  } catch (err: any) {
    throw new Error(err.response?.data?.message || "Erreur lors de la mise Ã  jour de la matiÃ¨re");
  }
}

/**
 * ğŸ“Œ Suppression d'une matiÃ¨re
 */
export async function deleteSubject(id: number): Promise<void> {
  try {
    // Validation de l'ID
    if (isNaN(id) || id <= 0) {
      throw new Error("ID de matiÃ¨re invalide");
    }
    
    await api.delete(`/admin/subjects/${id}`);
  } catch (err: any) {
    throw new Error(err.response?.data?.message || "Erreur lors de la suppression de la matiÃ¨re");
  }
}

/**
 * ğŸ“Œ Activation/DÃ©sactivation d'une matiÃ¨re
 */
export async function toggleSubjectStatus(id: number, is_active: boolean): Promise<Subject> {
  try {
    // Validation de l'ID
    if (isNaN(id) || id <= 0) {
      throw new Error("ID de matiÃ¨re invalide");
    }
    
    const res = await api.patch<Subject>(`/admin/subjects/${id}/status`, { is_active });
    return res.data;
  } catch (err: any) {
    throw new Error(err.response?.data?.message || "Erreur lors du changement de statut");
  }
}