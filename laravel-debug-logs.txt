Ajoutez ces logs dans votre contrôleur Laravel QuizSessionController.php dans la méthode store():

```php
public function store(StoreQuizSessionRequest $request)
{
    Log::info('🚀 Début création session', [
        'request_data' => $request->all(),
        'headers' => $request->headers->all()
    ]);

    try {
        $teacher = $this->getAuthenticatedTeacher();
        Log::info('✅ Teacher authentifié', ['teacher_id' => $teacher->id]);

        $validated = $request->validated();
        Log::info('✅ Données validées', ['validated' => $validated]);

        // Validation des étudiants si fournis
        if (!empty($validated['allowed_students'])) {
            Log::info('🔍 Validation étudiants');
            $this->validateStudentsInstitution($validated['allowed_students'], $teacher);
            Log::info('✅ Validation étudiants OK');
        }

        // Vérification des conflits d'horaires
        Log::info('🔍 Vérification conflits horaires');
        $this->checkScheduleConflicts($teacher, $validated['starts_at'], $validated['ends_at']);
        Log::info('✅ Pas de conflits horaires');

        // Vérifier les doublons
        Log::info('🔍 Vérification doublons');
        $exists = QuizSession::where('teacher_id', $teacher->id)
            ->where('title', $validated['title'])
            ->where('starts_at', $validated['starts_at'])
            ->where('ends_at', $validated['ends_at'])
            ->exists();

        if ($exists) {
            Log::warning('⚠️ Doublon détecté');
            return response()->json([
                'error' => 'Une session avec le même titre et les mêmes dates existe déjà.'
            ], 422);
        }
        Log::info('✅ Pas de doublons');

        Log::info('💾 Création de la session en base');
        $session = new QuizSession($validated);
        $session->teacher_id = $teacher->id;
        $session->status = 'scheduled';
        $session->generateSessionCode();
        $session->save();
        Log::info('✅ Session créée', ['session_id' => $session->id]);

        // Notifier les étudiants
        Log::info('📢 Début notifications');
        try {
            $notificationService = app(PlatformNotificationService::class);
            $studentsQuery = Student::active()->where('institution_id', $teacher->institution_id);

            if (!empty($session->allowed_students)) {
                $studentsQuery->whereIn('id', $session->allowed_students);
            }

            $students = $studentsQuery->with('user')->get();
            $users = $students->pluck('user')->filter();

            Log::info('📊 Utilisateurs à notifier', ['count' => $users->count()]);

            if ($users->isNotEmpty()) {
                $notificationService->createBulkNotifications(
                    $users,
                    PlatformNotification::TYPE_QUIZ_SESSION_CREATED,
                    'Nouvelle session d\'examen',
                    "Une nouvelle session d'examen '{$session->title}' a été créée pour le {$session->starts_at->format('d/m/Y à H:i')}.",
                    [
                        'session_id' => $session->id,
                        'quiz_id' => $session->quiz_id,
                        'starts_at' => $session->starts_at->toISOString(),
                        'ends_at' => $session->ends_at->toISOString(),
                    ],
                    $session->starts_at->addDays(1) // Expire le jour de la session
                );
                Log::info('✅ Notifications envoyées');
            }
        } catch (\Exception $e) {
            Log::error('❌ Erreur notifications', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            // Ne pas échouer pour autant
        }

        Log::info('🎉 Session créée avec succès, préparation réponse');
        $response = response()->json([
            'message' => 'Session créée avec succès',
            'session' => $session->load('quiz.subject')
        ], 201);

        Log::info('📤 Réponse préparée', ['status' => 201]);
        return $response;

    } catch (\Exception $e) {
        Log::error('❌ Erreur dans store()', [
            'error' => $e->getMessage(),
            'line' => $e->getLine(),
            'file' => $e->getFile(),
            'trace' => $e->getTraceAsString()
        ]);

        return response()->json([
            'error' => 'Erreur interne du serveur: ' . $e->getMessage()
        ], 500);
    }
}
```

Ces logs vous permettront de voir exactement où l'erreur 422 se produit.